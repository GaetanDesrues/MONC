Paramètres du réseau

in_channels : 1
n_classes : 2
Depth : 5
Padding : True
Wf : 6
batch_norm : False
up_mode : upsample

Descente :
1 --> UNetConvBlock(
  (block): Sequential(
    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU()
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU()
  )
)
2 --> UNetConvBlock(
  (block): Sequential(
    (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU()
    (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU()
  )
)
3 --> UNetConvBlock(
  (block): Sequential(
    (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU()
    (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU()
  )
)
4 --> UNetConvBlock(
  (block): Sequential(
    (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU()
    (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU()
  )
)
5 --> UNetConvBlock(
  (block): Sequential(
    (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU()
    (2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU()
  )
)

Remontée :
1 --> UNetUpBlock(
  (up): Sequential(
    (0): Upsample(scale_factor=2, mode=bilinear)
    (1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
  )
  (conv_block): UNetConvBlock(
    (block): Sequential(
      (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
  )
)
2 --> UNetUpBlock(
  (up): Sequential(
    (0): Upsample(scale_factor=2, mode=bilinear)
    (1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
  )
  (conv_block): UNetConvBlock(
    (block): Sequential(
      (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
  )
)
3 --> UNetUpBlock(
  (up): Sequential(
    (0): Upsample(scale_factor=2, mode=bilinear)
    (1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
  )
  (conv_block): UNetConvBlock(
    (block): Sequential(
      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
  )
)
4 --> UNetUpBlock(
  (up): Sequential(
    (0): Upsample(scale_factor=2, mode=bilinear)
    (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
  )
  (conv_block): UNetConvBlock(
    (block): Sequential(
      (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
  )
)

Dernière couche :
Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))